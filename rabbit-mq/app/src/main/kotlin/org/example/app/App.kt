/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example.app

import com.google.gson.Gson
import com.google.gson.stream.JsonWriter
import com.rabbitmq.client.Channel
import com.rabbitmq.client.ConnectionFactory
import com.rabbitmq.client.DefaultConsumer
import com.rabbitmq.client.MessageProperties
import com.rabbitmq.client.AMQP.BasicProperties
import com.rabbitmq.client.Envelope


import org.apache.commons.text.WordUtils
import java.util.concurrent.Executors

fun main() {
    println("Hello, World!")
    val factory = ConnectionFactory()
    val hostName = "localhost"
    val portNumber = 5672
    val userName = "guest"
    val password = "guest"
    factory.setUri("amqp://$userName:$password@$hostName:$portNumber/vhost")
    val conn = factory.newConnection()
    // create a channel
    val channel = conn.createChannel()
    // declare a queue
    val mfq = "myFirstQueue"
    channel.queueDeclare(mfq, true, false, false, null)
    // publish a message to the queue
    channel.basicPublish("", mfq, MessageProperties.PERSISTENT_TEXT_PLAIN, "Hello World!".toByteArray())
    // create a consumer
    val consumer = ActualConsumer(channel)
    // consume messages from the queue
    val consumerTag = channel.basicConsume(mfq, true, consumer)


    // executor service and thread pool
    val executorService = Executors.newFixedThreadPool(10)
    // add it to the connections
    val otherConnection = factory.newConnection(executorService)
`   // writing serialized JSON to a queue
    val myJsonQueue = "myJsonQueue"
    channel.queueDeclare(myJsonQueue, false, false, false, null)
    val book = Book("The Catcher in the Rye", "J.D. Salinger", 1951)
    val gson = Gson()
    gson.toJson(book).let { json ->
        val props = BasicProperties.Builder()
            .contentType("application/json")
            .deliveryMode(2) // persistent
            .build()
        channel.basicPublish("", myJsonQueue, props, json.toByteArray())
    }

    
}

class ActualConsumer(channel: Channel) : DefaultConsumer(channel) {
    override fun handleDelivery(consumerTag: String, envelope: Envelope, properties: BasicProperties, body: ByteArray) {
        val message = String(body)
        println("Received message: ${WordUtils.capitalize(message)}")
    }
}

class Book() {
    var id: String = ""
    var title: String = ""
    var author: String = ""
    var year: Int = 0

    constructor(title: String, author: String, year: Int) : this() {
        this.title = title
        this.author = author
        this.year = year
    }

    override fun toString(): String {
        return "Book(title='$title', author='$author', year=$year)"
    }
}